@page "/"
@using System.Text.Json
@using Microsoft.Extensions.Configuration
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration

<PageTitle>Index</PageTitle>

<button type="button" class="btn btn-primary" 
        onclick="@(() => GenerateReview())">
    Generate Review
</button>

@if (GetReviewError)
{
    <p>@Error</p>
}
else
{
    <ul class="list-group review-container">
        @foreach (var review in Reviews)
        {
            <li class="list-group-item">
                @review.ReviewText : @review.Rating
            </li>   
        }
    </ul>
}

@code {
    private IList<RandomReview> Reviews {get; set;} = new List<RandomReview>();
    private bool GetReviewError {get; set;}
    private string Error {get; set;}

    private async Task GenerateReview()
    {
        var url = Configuration.
            GetSection("ReviewGeneratorAPISettings").
            GetSection("ApiUrl").Value;
        var request = new HttpRequestMessage(HttpMethod.Get, 
            $"{url}/api/generate");
        var client = ClientFactory.CreateClient();

        try
        {
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await 
                    response.Content.ReadAsStreamAsync();
                var review = await 
                    JsonSerializer.DeserializeAsync<RandomReview>(responseStream);

                if (review is not null)
                    Reviews.Add(review);
            }
            else 
            {
                GetReviewError = true;
                Error = "Unable to Generate a Review. Please try again later";
            }
        }
        catch (Exception ex)
        {
            GetReviewError = true;
            Error = ex.ToString();
        }
    }
}